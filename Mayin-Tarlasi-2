#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TABLESIZE 8 // Tarlanin kac x kac matrisi
#define NORMAL 7    // mayin sayisi
#define WON 1
#define LOST -1     // kaybedince donen deger
#define CONTINUE 0  // devam

// global degiskenler
int subtab[TABLESIZE+2][TABLESIZE+2];
char tab[TABLESIZE+2][TABLESIZE+2];
int nb_mine;
int d_count = 0;

// fonksiyon prototipleri
void create_subtable(void);
void initialize_table(void);
void display_subtable(void);
void display_table(void);
void place_mines(void);
int checkmatchwon(void);
int dig(int line, int column);
void explorer(int line, int column);

int main(void)
{
    char action;
    int line, column;
    int ilerleme = CONTINUE;
    int yeniden;

    printf("Mayin Tarlasi oyunumuza hos geldiniz\n");
    create_subtable();
    initialize_table();

    while (1)
    {
        display_table();
        printf("\n");
        printf("Lutfen su formatta giriniz: c,line,column  -> ac (dig)\n");
        printf("                       d,line,column  -> bayrak koy\n");
        printf("                       e,line,column  -> bayragi kaldir\n");

        if (scanf(" %c,%d,%d", &action, &line, &column) != 3) {
            int ch;
            while ((ch = getchar()) != '\n' && ch != EOF) ;
            printf("Gecersiz giris. Lutfen formata uygun giriniz.\n");
            continue;
        }

        if (line < 1 || line > TABLESIZE || column < 1 || column > TABLESIZE) {
            printf("Koordinatlar 1 ile %d arasinda olmalidir.\n", TABLESIZE);
            continue;
        }

        if (action == 'c') {
            ilerleme = dig(line, column);
        } else if (action == 'd') {
            if (d_count < nb_mine) {
                if (tab[line][column] == '#') {
                    d_count++;
                    tab[line][column] = 'D';
                } else {
                    printf("Bu kare acik veya zaten isaretlenmis.\n");
                }
            } else {
                printf("TÃ¼m bayraklar kullanildi.\n");
            }
            ilerleme = checkmatchwon();
        } else if (action == 'e') {
            if (tab[line][column] == 'D') {
                d_count--;
                tab[line][column] = '#';
            } else {
                printf("Bu karede bayrak yok.\n");
            }
            ilerleme = CONTINUE;
        } else {
            printf("Gecersiz islem: %c\n", action);
            continue;
        }

        if (ilerleme == LOST) {
            printf("Arkadasim oyunu kaybettin\n");
            display_subtable();
            printf("Yeniden oynamak ister misin? [1-evet][0-hayir]\n");
            if (scanf("%d", &yeniden) != 1) return 0;
            if (yeniden == 1) {
                d_count = 0;
                ilerleme = CONTINUE;
                create_subtable();
                initialize_table();
                continue;
            } else {
                printf("Tesekkurler gorusuruz\n");
                return 0;
            }
        }

        if (ilerleme == WON) {
            printf("Bravo harika bir is cikardin!\n");
            display_subtable();
            printf("Yeniden oynamak ister misin? [1-evet][0-hayir]\n");
            if (scanf("%d", &yeniden) != 1) return 0;
            if (yeniden == 1) {
                d_count = 0;
                ilerleme = CONTINUE;
                create_subtable();
                initialize_table();
                continue;
            } else {
                printf("Tesekkurler gorusuruz\n");
                return 0;
            }
        }
    }

    return 0;
}

void create_subtable(void)
{
    int i, j;
    // tum alanlari 0 ile baslat
    for (i = 0; i <= TABLESIZE+1; i++) {
        for (j = 0; j <= TABLESIZE+1; j++) {
            subtab[i][j] = 0;
        }
    }
    // kenar sentinel degerleri (gerekirse)
    for (i = 0; i <= TABLESIZE+1; i++) {
        subtab[i][0] = 1;
        subtab[i][TABLESIZE+1] = 1;
    }
    for (j = 0; j <= TABLESIZE+1; j++) {
        subtab[0][j] = 1;
        subtab[TABLESIZE+1][j] = 1;
    }
    nb_mine = NORMAL;
    place_mines();
}

void initialize_table(void)
{
    int i, j;
    for (i = 0; i <= TABLESIZE+1; i++) {
        for (j = 0; j <= TABLESIZE+1; j++) {
            tab[i][j] = '#';
        }
    }
    for (i = 0; i <= TABLESIZE+1; i++) {
        tab[i][0] = '*';
        tab[i][TABLESIZE+1] = '*';
    }
    for (j = 0; j <= TABLESIZE+1; j++) {
        tab[0][j] = '*';
        tab[TABLESIZE+1][j] = '*';
    }
}

void display_table(void)
{
    int i, j;
    printf("\n    ");
    for (i = 1; i <= TABLESIZE; i++) {
        printf("%3d", i);
    }
    printf("\n");
    for (i = 1; i <= TABLESIZE; i++) {
        for (j = 1; j <= TABLESIZE; j++) {
            printf("%3c", tab[i][j]);
        }
        printf("  |%d\n", i);
    }
    for (i = 1; i <= TABLESIZE; i++) printf("---");
    printf("\n");
}

void display_subtable(void)
{
    int i, j;
    printf("\nAlt tablo (mayinlar '*'):\n    ");
    for (i = 1; i <= TABLESIZE; i++) printf("%3d", i);
    printf("\n");
    for (i = 1; i <= TABLESIZE; i++) {
        for (j = 1; j <= TABLESIZE; j++) {
            if (subtab[i][j] == -1) printf("%3c", '*');
            else printf("%3d", subtab[i][j]);
        }
        printf("  |%d\n", i);
    }
    printf("\n");
}

void place_mines(void)
{
    srand((unsigned)time(NULL));
    int placed = 0;
    int line, column, k, p;

    while (placed < nb_mine) {
        line = 1 + rand() % TABLESIZE;
        column = 1 + rand() % TABLESIZE;
        if (subtab[line][column] == -1) continue;
        subtab[line][column] = -1;
        placed++;
        for (k = -1; k <= 1; k++) {
            for (p = -1; p <= 1; p++) {
                if (subtab[line + k][column + p] != -1) {
                    subtab[line + k][column + p]++;
                }
            }
        }
    }
}

int dig(int line, int column)
{
    if (line < 1 || line > TABLESIZE || column < 1 || column > TABLESIZE) return CONTINUE;

    if (subtab[line][column] == -1) {
        tab[line][column] = '*';
        return LOST;
    } else if (subtab[line][column] > 0) {
        tab[line][column] = '0' + subtab[line][column];
        return checkmatchwon();
    } else {
        explorer(line, column);
        return checkmatchwon();
    }
}

void explorer(int line, int column)
{
    int i, j;
    if (tab[line][column] != '#') return;
    if (subtab[line][column] > 0) {
        tab[line][column] = '0' + subtab[line][column];
        return;
    }
    tab[line][column] = ' ';
    for (i = -1; i <= 1; i++) {
        for (j = -1; j <= 1; j++) {
            int ni = line + i;
            int nj = column + j;
            if (ni >= 1 && ni <= TABLESIZE && nj >= 1 && nj <= TABLESIZE) {
                if (tab[ni][nj] == '#') {
                    if (subtab[ni][nj] == 0) explorer(ni, nj);
                    else if (subtab[ni][nj] > 0) tab[ni][nj] = '0' + subtab[ni][nj];
                }
            }
        }
    }
}

int checkmatchwon(void)
{
    int i, j;
    int total_cells = TABLESIZE * TABLESIZE;
    int revealed = 0;

    for (i = 1; i <= TABLESIZE; i++) {
        for (j = 1; j <= TABLESIZE; j++) {
            if (tab[i][j] != '#' && tab[i][j] != 'D') revealed++;
        }
    }
    if (revealed == (total_cells - nb_mine)) return WON;
    return CONTINUE;
}
